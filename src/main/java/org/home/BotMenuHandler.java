package org.home;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BotMenuHandler {

    private static final Logger logger = LoggerFactory.getLogger(BotMenuHandler.class);

    // –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    private final Map<Long, Integer> lastMessageIds = new HashMap<>();
    private final Map<Long, Integer> lastImageIds = new HashMap<>();


    public void handleCallbackQuery(Update update, Bot bot) {
        String callbackData = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        String username = update.getCallbackQuery().getFrom().getUserName(); // –ù–∏–∫–Ω–µ–π–º
        String firstName = update.getCallbackQuery().getFrom().getFirstName(); // –ò–º—è
        String lastName = update.getCallbackQuery().getFrom().getLastName(); // –§–∞–º–∏–ª–∏—è
        long userId = update.getCallbackQuery().getFrom().getId(); // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        logger.info("Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId={}, username={}, firstName={}, lastName={}",
                userId, username != null ? username : "N/A",
                firstName != null ? firstName : "N/A",
                lastName != null ? lastName : "N/A");

        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω callback-–∑–∞–ø—Ä–æ—Å: callbackData={}, chatId={}", callbackData, chatId);

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
        if (lastMessageIds.containsKey(chatId)) {
            int lastMessageId = lastMessageIds.get(chatId);
            deleteMessage(bot, chatId, lastMessageId);
            logger.debug("–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: messageId={}", lastMessageId);
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
        if (lastImageIds.containsKey(chatId)) {
            int lastImageMessageId = lastImageIds.get(chatId);
            deleteMessage(bot, chatId, lastImageMessageId);
            logger.debug("–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: messageId={}", lastImageMessageId);
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ DataHandler
        String responseText = DataHandler.getResponse(callbackData);
        String imagePath = DataHandler.getImage(callbackData);

        logger.info("–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: {}, –ü—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", responseText, imagePath);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ ID
        int newTextMessageId = bot.sendResponse(chatId, responseText);
        lastMessageIds.put(chatId, newTextMessageId);
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: messageId={}", newTextMessageId);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ ID
        if (imagePath != null) {
            int newImageMessageId = bot.sendImage(chatId, imagePath);
            lastImageIds.put(chatId, newImageMessageId);
            logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: messageId={}", newImageMessageId);
        }

        // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(update.getCallbackQuery().getId());
        answer.setText("–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.");
        try {
            bot.execute(answer);
            logger.info("Callback-–∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: callbackId={}", update.getCallbackQuery().getId());
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage(), e);
        }
    }

    public InlineKeyboardMarkup createInlineMenu() {
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Inline –º–µ–Ω—é");

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –†—è–¥ 1
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", "administration"));
        row1.add(createButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ", "advanced_search"));
        rows.add(row1);

        // –†—è–¥ 2
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("–£–ö –°–∏—Ç–∏ –î–æ–º", "uk"));
        row2.add(createButton("–•–í–°, –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ", "hvs"));
        row2.add(createButton("–ì–í–°, —Ç–µ–ø–ª–æ", "gvs"));
        rows.add(row2);

        // –†—è–¥ 3
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "energy"));
        row3.add(createButton("–û–ø–µ—Ä–∞—Ç–æ—Ä –¢–ö–û", "trash"));
        row3.add(createButton("–ê–Ω—Ç–µ–Ω–Ω–∞", "ant"));
        rows.add(row3);

        // –†—è–¥ 4
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("–ö–∞–º–µ—Ä–∞ 1", "cam1"));
        row4.add(createButton("–ö–∞–º–µ—Ä–∞ 2", "cam2"));
        row4.add(createButton("–ö–∞–º–µ—Ä–∞ 3", "cam3"));
        row4.add(createButton("–ö–∞–º–µ—Ä–∞ 4", "cam4"));
        row4.add(createButton("–ö–∞–º–µ—Ä–∞ 5", "cam5"));
        rows.add(row4);

        inlineKeyboardMarkup.setKeyboard(rows);

        logger.info("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {} –∫–Ω–æ–ø–æ–∫", rows.size());
        return inlineKeyboardMarkup;
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: text={}, callbackData={}", text, callbackData);
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private InlineKeyboardButton createUrlButton(String text, String url) {
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏: text={}, url={}", text, url);
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setUrl(url);
        return button;
    }

    public void deleteMessage(Bot bot, long chatId, int messageId) {
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: chatId={}, messageId={}", chatId, messageId);

        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chatId));
        deleteMessage.setMessageId(messageId);

        try {
            bot.execute(deleteMessage);
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: chatId={}, messageId={}", chatId, messageId);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: chatId={}, messageId={}, error={}", chatId, messageId, e.getMessage(), e);
        }
    }

}
